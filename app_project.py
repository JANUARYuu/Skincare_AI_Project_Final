import streamlit as st
import pandas as pd
import numpy as np
import cv2
import os

# ----------------------------------------------------------------------
# 0. ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
# ----------------------------------------------------------------------

st.set_page_config(layout="wide", page_title="AI Skincare & Makeup Advisor: Image Analysis")

@st.cache_data
def load_db(file_path):
    """‡πÇ‡∏´‡∏•‡∏î‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• CSV ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡πà‡∏≤ Null"""
    if not os.path.exists(file_path):
        st.error(f"‚ùó ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡πâ‡∏≤‡∏¢‡πÅ‡∏£‡∏á: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå '{file_path}' ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
        return pd.DataFrame()
    
    try:
        # ‡πÉ‡∏ä‡πâ errors='coerce' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô NaN ‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Depth_Scale
        db = pd.read_csv(file_path, na_values=['N/A', '', ' '])
        
        if 'Depth_Scale' in db.columns:
            db['Depth_Scale'] = pd.to_numeric(db['Depth_Scale'], errors='coerce')
            
        if 'Key_Ingredient' in db.columns:
             db['Key_Ingredient'] = db['Key_Ingredient'].astype(str).fillna('‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏') 
        if 'Price_Range' in db.columns:
            db['Price_Range'] = db['Price_Range'].fillna('‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')
            
        return db
    except Exception as e:
        st.error(f"‚ùó ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå {file_path}: {e}")
        return pd.DataFrame()

# ‡πÇ‡∏´‡∏•‡∏î‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
PRODUCT_DB = load_db('products.csv')
SHADE_DB = load_db('foundation_shades.csv')
TONE_DB = load_db('skin_tones.csv')
MAKEUP_DB = load_db('makeup_products.csv')


# ----------------------------------------------------------------------
# 1. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏†‡∏≤‡∏û‡∏ú‡∏¥‡∏ß‡πÅ‡∏•‡∏∞‡πÇ‡∏ó‡∏ô‡∏™‡∏µ‡∏ú‡∏¥‡∏ß‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏û (Image Analysis)
# ----------------------------------------------------------------------

def analyze_skin_from_image(uploaded_file):
    """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏ó‡∏ô‡∏™‡∏µ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏°‡∏Ç‡∏≠‡∏á‡∏ú‡∏¥‡∏ß‡∏à‡∏≤‡∏Å‡∏Ñ‡πà‡∏≤‡∏™‡∏µ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û (BGR ‡πÅ‡∏•‡∏∞ HSV)"""
    if uploaded_file is None:
        return None
    
    # 1. ‡∏≠‡πà‡∏≤‡∏ô‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏ß‡∏¢ OpenCV
    file_bytes = np.asarray(bytearray(uploaded_file.read()), dtype=np.uint8)
    image = cv2.imdecode(file_bytes, 1) # BGR format
    hsv_image = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)
    
    # 2. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏™‡∏µ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
    avg_bgr = np.mean(image, axis=(0, 1))
    avg_hsv = np.mean(hsv_image, axis=(0, 1))
    
    # 3. ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏°‡∏Ç‡∏≠‡∏á‡∏ú‡∏¥‡∏ß (Depth_Scale) ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ V (Value/Brightness) ‡∏Ç‡∏≠‡∏á HSV
    V = avg_hsv[2]
    # ‡πÅ‡∏õ‡∏•‡∏á V (255 -> 0) ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô Depth_Scale (1.0 -> 10.0)
    depth_scale = 1.0 + (255 - V) / 25.5 
    depth_scale = np.clip(depth_scale, 1.0, 9.0)
    
    # 4. ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÇ‡∏ó‡∏ô‡∏™‡∏µ‡∏ú‡∏¥‡∏ß (Undertone) ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ BGR
    R, G, B = avg_bgr[2], avg_bgr[1], avg_bgr[0]

    # Warm (R>G>B) ‡∏´‡∏£‡∏∑‡∏≠ (R+G)/2 > B
    if (R > G * 1.05 and G > B * 1.05) or (R + G) / 2 > B * 1.1:
        undertone = 'Warm' 
    # Cool (B>R & B>G)
    elif B > R * 1.05 and B > G * 1.05:
        undertone = 'Cool' 
    # Neutral
    else:
        undertone = 'Neutral' 
        
    # 5. ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ú‡∏¥‡∏ß (Skin Type) - (‡πÉ‡∏ä‡πâ Rule-Based ‡∏à‡∏≤‡∏Å‡∏Ñ‡πà‡∏≤ S ‡πÅ‡∏•‡∏∞ V)
    S = avg_hsv[1]
    
    if S < 100 and depth_scale < 5.0: # ‡∏ú‡∏¥‡∏ß‡∏™‡∏ß‡πà‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏™‡∏µ‡πÑ‡∏°‡πà‡∏™‡∏î (‡∏ú‡∏¥‡∏ß‡πÅ‡∏´‡πâ‡∏á/‡∏Ç‡∏≤‡∏î‡∏ô‡πâ‡∏≥)
        skin_type = 'Dry' 
        acne_severity = 'Low'
    elif depth_scale > 5.5 and S > 130: # ‡∏ú‡∏¥‡∏ß‡πÄ‡∏Ç‡πâ‡∏°‡πÅ‡∏•‡∏∞‡∏™‡∏µ‡∏™‡∏î (‡∏ú‡∏¥‡∏ß‡∏ú‡∏™‡∏°/‡∏°‡∏±‡∏ô)
        skin_type = 'Oily'
        acne_severity = 'Moderate'
    else: # ‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡∏≤‡∏á
        skin_type = 'Combination'
        acne_severity = 'Low'
        
    return {
        'Skin_Type': skin_type,  
        'Acne_Severity': acne_severity,
        'Undertone': undertone,
        'Depth_Scale': float(depth_scale)
    }

# ----------------------------------------------------------------------
# 2. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå (Rule-Based Logic)
# ----------------------------------------------------------------------

def recommend_skincare(skin_analysis_results, db):
    """‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Å‡∏é‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏ö‡∏≥‡∏£‡∏∏‡∏á‡∏ú‡∏¥‡∏ß"""
    skin_type = skin_analysis_results['Skin_Type']
    acne_severity = skin_analysis_results['Acne_Severity']
    recommendations = {}

    # 1. Cleanser
    if skin_type in ['Oily', 'Combination'] and acne_severity != 'Low':
        reco = db[(db['Category'] == 'Cleanser') & (db['Key_Ingredient'].str.contains('Salicylic Acid|BHA', case=False, na=False))].head(1)
    elif skin_type == 'Dry':
        reco = db[(db['Category'] == 'Cleanser') & (db['Key_Ingredient'].str.contains('Ceramide|Glycerin', case=False, na=False))].head(1)
    else:
        reco = db[db['Category'] == 'Cleanser'].head(1)
    if not reco.empty:
        recommendations['Step 1: Cleanser (‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î)'] = reco

    # 2. Treatment
    if acne_severity == 'Moderate':
        reco = db[(db['Key_Ingredient'].str.contains('Niacinamide|Salicylic Acid|Benzoyl Peroxide', case=False, na=False)) & (db['Category'] == 'Treatment')].head(2)
        if not reco.empty:
            recommendations['Step 2: Targeted Treatment (‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏™‡∏¥‡∏ß/‡∏•‡∏î‡∏£‡∏≠‡∏¢)'] = reco
    
    # 3. Moisturizer
    if skin_type in ['Oily', 'Combination']:
        reco = db[(db['Category'] == 'Moisturizer') & (db['Product_Name'].str.contains('Gel|Water|Lightweight', case=False, na=False))].head(1)
    else:
        reco = db[(db['Category'] == 'Moisturizer') & (db['Key_Ingredient'].str.contains('Ceramide|Squalane', case=False, na=False))].head(1)
    if not reco.empty:
        recommendations['Step 3: Moisturizer (‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∏‡πà‡∏°‡∏ä‡∏∑‡πâ‡∏ô)'] = reco

    # 4. Sunscreen
    reco = db[db['Category'] == 'Sunscreen'].head(1)
    if not reco.empty:
        recommendations['Step 4: Sunscreen (‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô)'] = reco
        
    return recommendations


def recommend_foundation(undertone, depth_scale, db):
    """‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÄ‡∏â‡∏î‡∏™‡∏µ‡∏£‡∏≠‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ï‡∏≤‡∏°‡πÇ‡∏ó‡∏ô‡∏ú‡∏¥‡∏ß‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏°"""
    if db.empty:
        return pd.DataFrame()
        
    # ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà Depth_Scale ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç (‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô NaN)
    filtered_df = db[db['Depth_Scale'].notna()]
    
    filtered_df = filtered_df[filtered_df['Undertone'] == undertone]
    
    if filtered_df.empty:
        filtered_df = db[db['Undertone'] == 'Neutral']

    if filtered_df.empty:
        return pd.DataFrame() 

    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á (Depth_Scale ‡∏ñ‡∏π‡∏Å‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô float ‡πÅ‡∏•‡πâ‡∏ß)
    filtered_df['Depth_Diff'] = np.abs(filtered_df['Depth_Scale'] - depth_scale)
    
    return filtered_df.sort_values(by='Depth_Diff').head(3).drop(columns=['Depth_Diff']).reset_index(drop=True)


def recommend_makeup(undertone, db):
    """‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡πÄ‡∏°‡∏Ñ‡∏≠‡∏±‡∏û‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ï‡∏≤‡∏°‡πÇ‡∏ó‡∏ô‡∏ú‡∏¥‡∏ß (Undertone)"""
    if db.empty:
        return pd.DataFrame()

    recommendations = {}

    # 1. ‡πÅ‡∏õ‡πâ‡∏á (Powder)
    reco_powder = db[db['Category'] == 'Powder'].head(1)
    if not reco_powder.empty:
        recommendations['Step 1: Powder (‡πÅ‡∏õ‡πâ‡∏á)'] = reco_powder

    # 2. ‡∏ö‡∏•‡∏±‡∏ä‡∏≠‡∏≠‡∏ô (Blush): ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏™‡∏µ‡∏ï‡∏≤‡∏°‡πÇ‡∏ó‡∏ô‡∏ú‡∏¥‡∏ß
    if undertone == 'Warm':
        color_keywords = 'Peach|Orange|Gold|Warm'
    elif undertone == 'Cool':
        color_keywords = 'Rose|Pink|Berry|Cool'
    else:
        color_keywords = 'Nude|Rose|Peach'
        
    reco_blush = db[(db['Category'] == 'Blush') & (db['Key_Feature'].str.contains(color_keywords, case=False, na=False))].head(1)
    if not reco_blush.empty:
        recommendations[f'Step 2: Blush ({undertone} Tone Match)'] = reco_blush

    # 3. ‡∏•‡∏¥‡∏õ‡∏™‡∏ï‡∏¥‡∏Å (Lip)
    reco_lip = db[(db['Category'] == 'Lip') & (db['Key_Feature'].str.contains(color_keywords, case=False, na=False))].head(1)
    if not reco_lip.empty:
        recommendations[f'Step 3: Lip Color ({undertone} Tone Match)'] = reco_lip

    # 4. Highlight/Contour
    reco_contour = db[(db['Category'] == 'Contour') & (db['Tone_Type'].isin(['Neutral', undertone]))].head(1)
    if not reco_contour.empty:
        recommendations['Step 4: Contour'] = reco_contour
        
    return recommendations


# ----------------------------------------------------------------------
# 3. Streamlit UI ‡∏´‡∏•‡∏±‡∏Å
# ----------------------------------------------------------------------

def main():
    if PRODUCT_DB.empty or SHADE_DB.empty or TONE_DB.empty or MAKEUP_DB.empty:
        st.warning("‚ùó ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (products.csv, foundation_shades.csv, skin_tones.csv, makeup_products.csv) ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
        return

    st.title("üî¨ AI Skincare & Makeup Advisor: Image Analysis Project")
    st.caption("‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏ó‡∏ô‡∏™‡∏µ‡∏ú‡∏¥‡∏ß ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏°‡∏ú‡∏¥‡∏ß ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏à‡∏≤‡∏Å‡∏Ñ‡πà‡∏≤‡∏™‡∏µ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û")
    st.markdown("---")
    
    st.subheader("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì")
    st.info("üí° **‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö:** ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏ô‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏™‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô (‡∏™‡∏ß‡πà‡∏≤‡∏á/‡∏°‡∏∑‡∏î) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå Depth ‡πÅ‡∏•‡∏∞ Tone ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏õ!")
    
    uploaded_file = st.file_uploader("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û (JPG/PNG)", type=["jpg", "jpeg", "png"])

    if uploaded_file is not None:
        
        # 1. ‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
        col1, col2 = st.columns([1, 1])

        with col1:
            try:
                # ‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
                file_bytes = np.asarray(bytearray(uploaded_file.read()), dtype=np.uint8)
                opencv_image = cv2.imdecode(file_bytes, 1)
                st.image(opencv_image, channels="BGR", caption=f"‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î", use_column_width=True)
            except Exception as e:
                st.error(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ: {e}")

        with col2:
            st.subheader("üìä ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏†‡∏≤‡∏û‡∏ú‡∏¥‡∏ß‡πÅ‡∏•‡∏∞‡πÇ‡∏ó‡∏ô‡∏™‡∏µ (‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏û‡∏ñ‡πà‡∏≤‡∏¢)")
            with st.spinner('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏µ‡∏†‡∏≤‡∏û...'):
                results = analyze_skin_from_image(uploaded_file)
                
            if results:
                st.success("‚úÖ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
                st.metric(label="‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ú‡∏¥‡∏ß‡∏´‡∏•‡∏±‡∏Å", value=f"**{results['Skin_Type']}**")
                st.metric(label="‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ß", value=f"**{results['Acne_Severity']}**")
                st.info(f"**‡πÇ‡∏ó‡∏ô‡∏™‡∏µ‡∏ú‡∏¥‡∏ß (Undertone):** {results['Undertone']} | **‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏° (Depth):** {results['Depth_Scale']:.2f}")

        st.markdown("---")
        
        # 2. ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ Skincare
        st.header("üß¥ 2. ‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏ö‡∏≥‡∏£‡∏∏‡∏á‡∏ú‡∏¥‡∏ß‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ (Skincare)")
        skincare_recommendations = recommend_skincare(results, PRODUCT_DB)
        # ... (‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• Skincare ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
        if not skincare_recommendations:
            st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏ö‡∏≥‡∏£‡∏∏‡∏á‡∏ú‡∏¥‡∏ß‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 'products.csv'.")
        else:
            for category, df_reco in skincare_recommendations.items():
                st.markdown(f"#### {category}")
                
                for _, row in df_reco.iterrows():
                    col_img_sk, col_info_sk = st.columns([1, 4]) 

                    with col_img_sk:
                        image_file = row.get('Image_File', 'default.png')
                        image_path = f"images/{image_file}"
                        if os.path.exists(image_path):
                            st.image(image_path, width=100)
                        else:
                            st.caption(f"No Image: {image_file}")
                            
                    with col_info_sk:
                        st.markdown(f"**{row['Product_Name']}** (‡πÅ‡∏ö‡∏£‡∏ô‡∏î‡πå: {row['Brand']})")
                        st.markdown(f"**‡∏à‡∏∏‡∏î‡πÄ‡∏î‡πà‡∏ô:** *{row['Key_Ingredient']}* | ‡∏£‡∏≤‡∏Ñ‡∏≤: {row['Price_Range']}")
                        
                    st.markdown("---")
        
        st.markdown("---")

        # 3. ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ Foundation
        st.header("üé® 3. ‡πÄ‡∏â‡∏î‡∏™‡∏µ‡∏£‡∏≠‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ (Foundation)")
        
        foundation_recommendations = recommend_foundation(
            results['Undertone'], results['Depth_Scale'], SHADE_DB
        )
        # ... (‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• Foundation ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
        if not foundation_recommendations.empty:
            st.markdown(f"**‡πÄ‡∏â‡∏î‡∏™‡∏µ‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î** ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏ó‡∏ô **{results['Undertone']}** ‡πÅ‡∏•‡∏∞‡∏ú‡∏¥‡∏ß‡∏£‡∏∞‡∏î‡∏±‡∏ö **{results['Depth_Scale']:.2f}**:")
            
            for _, row in foundation_recommendations.iterrows():
                col_img_fd, col_info_fd = st.columns([1, 4]) 
                
                with col_img_fd:
                    image_file = row.get('Image_File', 'default.png')
                    image_path = f"images/{image_file}"
                    if os.path.exists(image_path):
                        st.image(image_path, width=100)
                    else:
                        st.caption(f"No Image: {image_file}")

                with col_info_fd:
                    depth_display = f"{row['Depth_Scale']:.1f}" if pd.notna(row['Depth_Scale']) else 'N/A'
                    st.markdown(f"**{row['Shade_Name']}** (‡πÅ‡∏ö‡∏£‡∏ô‡∏î‡πå: {row['Brand']})")
                    st.markdown(f"**‡∏£‡∏∞‡∏î‡∏±‡∏ö:** {row['Coverage']} | **‡πÇ‡∏ó‡∏ô:** {row['Undertone']} | **Depth:** {depth_display}")

                st.markdown("---")
        else:
            st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏â‡∏î‡∏™‡∏µ‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 'foundation_shades.csv'.")
            
        st.markdown("---")
            
        # 4. ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ Makeup Products ‡∏≠‡∏∑‡πà‡∏ô‡πÜ
        st.header("üíÑ 4. ‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡πÅ‡∏ï‡πà‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ (Makeup)")

        if MAKEUP_DB.empty:
            st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå 'makeup_products.csv' ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö")
        else:
            makeup_recommendations = recommend_makeup(
                results['Undertone'], MAKEUP_DB
            )
            # ... (‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• Makeup ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
            if not makeup_recommendations:
                st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡πÄ‡∏°‡∏Ñ‡∏≠‡∏±‡∏û‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
            else:
                for category, df_reco in makeup_recommendations.items():
                    st.markdown(f"#### {category}")
                    
                    for _, row in df_reco.iterrows():
                        col_img_mk, col_info_mk = st.columns([1, 4]) 
                        
                        with col_img_mk:
                            image_file = row.get('Image_File', 'default.png')
                            image_path = f"images/{image_file}"
                            if os.path.exists(image_path):
                                st.image(image_path, width=100)
                            else:
                                st.caption(f"No Image: {image_file}")

                        with col_info_mk:
                            st.markdown(f"**{row['Product_Name']}** (‡πÅ‡∏ö‡∏£‡∏ô‡∏î‡πå: {row['Brand']})")
                            st.markdown(f"**‡∏à‡∏∏‡∏î‡πÄ‡∏î‡πà‡∏ô:** *{row.get('Key_Feature', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')}* | ‡∏£‡∏≤‡∏Ñ‡∏≤: {row['Price_Range']}")

                        st.markdown("---")


if __name__ == "__main__":
    main()
