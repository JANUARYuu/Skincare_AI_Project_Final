import streamlit as st
import pandas as pd
import numpy as np
import cv2
import os

# --- 0. ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ---

st.set_page_config(layout="wide", page_title="AI Skincare Advisor Project")

@st.cache_data
def load_product_db():
    """‡πÇ‡∏´‡∏•‡∏î‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏à‡∏≤‡∏Å products.csv"""
    file_path = 'products.csv'
    if not os.path.exists(file_path):
        st.error(f"‚ùó ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡πâ‡∏≤‡∏¢‡πÅ‡∏£‡∏á: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå '{file_path}' ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥")
        return pd.DataFrame()
    
    try:
        db = pd.read_csv(file_path)
        db['Price_Range'] = db['Price_Range'].fillna('‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')
        db['Konvy_Link'] = db['Konvy_Link'].fillna('#')
        return db
    except Exception as e:
        st.error(f"‚ùó ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå CSV: {e}")
        return pd.DataFrame()

PRODUCT_DB = load_product_db()

# --- 1. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏†‡∏≤‡∏û‡∏ú‡∏¥‡∏ß (Machine Learning Mock) ---

def analyze_skin(uploaded_file):
    """
    ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏¥‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
    (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏ò‡∏¥‡∏ï‡∏ß‡πà‡∏≤‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô)
    """
    if uploaded_file is None:
        return None
        
    file_name = uploaded_file.name.lower()
    
    if "acne" in file_name or "oil" in file_name or "‡∏°‡∏±‡∏ô" in file_name or "‡∏™‡∏¥‡∏ß" in file_name:
        # ‡∏Å‡∏£‡∏ì‡∏µ‡∏ú‡∏¥‡∏ß‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤: ‡∏´‡∏ô‡πâ‡∏≤‡∏°‡∏±‡∏ô ‡∏°‡∏µ‡∏™‡∏¥‡∏ß‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á
        return {
            'Skin_Type': 'Oily',  
            'Acne_Severity': 'Moderate',
            'Oiliness_Score': 0.85
        }
    else:
        # ‡∏Å‡∏£‡∏ì‡∏µ‡∏ú‡∏¥‡∏ß‡∏õ‡∏Å‡∏ï‡∏¥: ‡∏ú‡∏¥‡∏ß‡∏ú‡∏™‡∏° ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ß
        return {
            'Skin_Type': 'Combination', 
            'Acne_Severity': 'Low',
            'Oiliness_Score': 0.45
        }

# --- 2. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå (Rule-Based Logic) ---

def recommend_products(skin_analysis_results, db):
    """‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Å‡∏é‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏ï‡∏≤‡∏°‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏¥‡∏ß"""
    skin_type = skin_analysis_results['Skin_Type']
    acne_severity = skin_analysis_results['Acne_Severity']
    recommendations = {}

    # 1. Cleanser
    if skin_type in ['Oily', 'Combination'] and acne_severity != 'Low':
        reco = db[(db['Category'] == 'Cleanser') & (db['Key_Ingredient'].str.contains('Salicylic Acid', case=False, na=False))].head(1)
    else:
        reco = db[db['Category'] == 'Cleanser'].head(1)
        
    if not reco.empty:
        recommendations['Step 1: Cleanser (‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î)'] = reco.iloc[0]

    # 2. Treatment (‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ß)
    if acne_severity == 'Moderate':
        reco = db[db['Key_Ingredient'].str.contains('Benzoyl Peroxide|Niacinamide', case=False, na=False)].head(2)
        if not reco.empty:
            recommendations['Step 2: Targeted Treatment (‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏™‡∏¥‡∏ß/‡∏•‡∏î‡∏£‡∏≠‡∏¢)'] = reco

    # 3. Moisturizer (‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏ö‡∏≤‡∏á‡πÄ‡∏ö‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏°‡∏±‡∏ô)
    if skin_type in ['Oily', 'Combination']:
        reco = db[(db['Category'] == 'Moisturizer') & (db['Product_Name'].str.contains('Gel|Water', case=False, na=False))].head(1)
    else:
        reco = db[db['Category'] == 'Moisturizer'].head(1) # ‡∏°‡∏≠‡∏¢‡∏™‡πå‡πÄ‡∏à‡∏≠‡πÑ‡∏£‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
    
    if not reco.empty:
        recommendations['Step 3: Moisturizer (‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∏‡πà‡∏°‡∏ä‡∏∑‡πâ‡∏ô)'] = reco.iloc[0]

    # 4. Sunscreen
    reco = db[db['Category'] == 'Sunscreen'].head(1)
    if not reco.empty:
        recommendations['Step 4: Sunscreen (‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô)'] = reco.iloc[0]
        
    return recommendations

# --- 3. Streamlit UI ‡∏´‡∏•‡∏±‡∏Å ---

def main():
    if PRODUCT_DB.empty:
        st.warning("‡πÇ‡∏õ‡∏£‡∏î‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå 'products.csv' ‡∏Å‡πà‡∏≠‡∏ô‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠")
        return

    st.title("üî¨ AI Skincare Advisor: Face Analysis Project")
    st.caption("‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏†‡∏≤‡∏û‡∏ú‡∏¥‡∏ß‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏ô‡∏≥‡πÄ‡∏™‡∏ô‡∏≠)")
    st.markdown("---")
    
    st.subheader("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì")
    uploaded_file = st.file_uploader("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û (JPG/PNG) - ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ 'oil' ‡∏´‡∏£‡∏∑‡∏≠ 'acne' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏ß‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤", type=["jpg", "jpeg", "png"])

    if uploaded_file is not None:
        col1, col2 = st.columns([1, 1])

        with col1:
            # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
            file_bytes = np.asarray(bytearray(uploaded_file.read()), dtype=np.uint8)
            opencv_image = cv2.imdecode(file_bytes, 1)
            st.image(opencv_image, channels="BGR", caption=f"‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î ({uploaded_file.name})", use_column_width=True)

        with col2:
            st.subheader("üìä ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏†‡∏≤‡∏û‡∏ú‡∏¥‡∏ß (Simulated)")
            with st.spinner('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•...'):
                results = analyze_skin(uploaded_file)
                
            if results:
                st.success("‚úÖ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! (‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≥‡∏•‡∏≠‡∏á)")
                st.metric(label="‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ú‡∏¥‡∏ß‡∏´‡∏•‡∏±‡∏Å", value=f"**{results['Skin_Type']}**")
                st.metric(label="‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ß", value=f"**{results['Acne_Severity']}**")
                st.caption(f"‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡∏ô: {results['Oiliness_Score']:.2f}")

                st.markdown("---")
                st.header("üõí ‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏ß‡∏Ñ‡∏∏‡∏ì")
                product_recommendations = recommend_products(results, PRODUCT_DB)

                if not product_recommendations:
                    st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 'products.csv'.")
                    return

                # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
                for category, data in product_recommendations.items():
                    st.markdown(f"#### {category}")
                    
                    if isinstance(data, pd.Series):
                        df = pd.DataFrame([data])
                    else:
                        df = data
                        
                    for _, row in df.iterrows():
                        st.markdown(f"**{row['Product_Name']}** (‡πÅ‡∏ö‡∏£‡∏ô‡∏î‡πå: {row['Brand']})")
                        st.markdown(f"**‡∏à‡∏∏‡∏î‡πÄ‡∏î‡πà‡∏ô:** *{row['Key_Ingredient']}* | ‡∏£‡∏≤‡∏Ñ‡∏≤: {row['Price_Range']}")
                        st.markdown(f"[üîó ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏à‡∏≥‡∏•‡∏≠‡∏á)]({row['Konvy_Link']})")
                        st.markdown("---")

if __name__ == "__main__":
    main()
