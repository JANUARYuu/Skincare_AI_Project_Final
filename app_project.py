import streamlit as st
import pandas as pd
import numpy as np
import cv2
import os

# ----------------------------------------------------------------------
# 0. ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
# ----------------------------------------------------------------------

st.set_page_config(layout="wide", page_title="AI Skincare & Makeup Advisor")

@st.cache_data
def load_db(file_path):
    """‡πÇ‡∏´‡∏•‡∏î‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• CSV ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡πà‡∏≤ Null"""
    if not os.path.exists(file_path):
        st.error(f"‚ùó ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡πâ‡∏≤‡∏¢‡πÅ‡∏£‡∏á: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå '{file_path}' ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
        return pd.DataFrame()
    
    try:
        db = pd.read_csv(file_path)
        # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Rule-Based Logic
        if 'Price_Range' in db.columns:
            db['Price_Range'] = db['Price_Range'].fillna('‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')
        if 'Konvy_Link' in db.columns:
            db['Konvy_Link'] = db['Konvy_Link'].fillna('#')
        if 'Key_Ingredient' in db.columns:
             db['Key_Ingredient'] = db['Key_Ingredient'].astype(str)
        return db
    except Exception as e:
        st.error(f"‚ùó ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå {file_path}: {e}")
        return pd.DataFrame()

PRODUCT_DB = load_db('products.csv')
SHADE_DB = load_db('foundation_shades.csv')
TONE_DB = load_db('skin_tones.csv')


# ----------------------------------------------------------------------
# 1. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏†‡∏≤‡∏û‡∏ú‡∏¥‡∏ß‡πÅ‡∏•‡∏∞‡πÇ‡∏ó‡∏ô‡∏™‡∏µ‡∏ú‡∏¥‡∏ß (Simulation)
# ----------------------------------------------------------------------

def analyze_skin(uploaded_file, tone_db):
    """
    ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏¥‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î 
    ‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÇ‡∏ó‡∏ô‡∏™‡∏µ‡∏ú‡∏¥‡∏ß (Depth, Undertone) ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• TONE_DB
    """
    if uploaded_file is None:
        return None
        
    file_name = uploaded_file.name.lower()
    
    # 1. ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ú‡∏¥‡∏ß‡∏´‡∏•‡∏±‡∏Å (Skin Concern)
    if any(keyword in file_name for keyword in ["acne", "oil", "‡∏°‡∏±‡∏ô", "‡∏™‡∏¥‡∏ß"]):
        skin_type = 'Oily'  
        acne_severity = 'Moderate'
        # ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÇ‡∏ó‡∏ô‡∏ú‡∏¥‡∏ß: ‡πÄ‡∏ô‡πâ‡∏ô‡πÑ‡∏õ‡∏ó‡∏µ‡πà Medium/Tan Warm/Neutral
        tone_options = tone_db[tone_db['Depth_Scale'].between(3.5, 6.5)]
    elif any(keyword in file_name for keyword in ["dry", "‡πÅ‡∏´‡πâ‡∏á", "sensitive", "‡πÅ‡∏û‡πâ"]):
        skin_type = 'Dry' 
        acne_severity = 'Low'
        # ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÇ‡∏ó‡∏ô‡∏ú‡∏¥‡∏ß: ‡πÄ‡∏ô‡πâ‡∏ô‡πÑ‡∏õ‡∏ó‡∏µ‡πà Fair/Light Cool/Neutral
        tone_options = tone_db[tone_db['Depth_Scale'].between(1.0, 3.5)]
    else:
        skin_type = 'Combination' 
        acne_severity = 'Low'
        # ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÇ‡∏ó‡∏ô‡∏ú‡∏¥‡∏ß: ‡πÄ‡∏ô‡πâ‡∏ô‡πÑ‡∏õ‡∏ó‡∏µ‡πà Medium Neutral
        tone_options = tone_db[tone_db['Depth_Scale'].between(3.0, 5.0)]
        
    # 2. ‡∏™‡∏∏‡πà‡∏°‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÇ‡∏ó‡∏ô‡∏™‡∏µ‡∏ú‡∏¥‡∏ß‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß
    if not tone_options.empty:
        # ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ñ‡∏ß‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏à‡∏≤‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á
        random_tone = tone_options.sample(n=1).iloc[0]
        undertone = random_tone['Undertone']
        depth_scale = random_tone['Depth_Scale']
    else:
        # ‡∏´‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏ó‡∏ô‡∏™‡∏µ‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤/‡∏Å‡∏£‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ Default
        undertone = 'Neutral'
        depth_scale = 4.5
        
    return {
        'Skin_Type': skin_type,  
        'Acne_Severity': acne_severity,
        'Undertone': undertone,
        'Depth_Scale': depth_scale
    }

# ----------------------------------------------------------------------
# 2.1 ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏ö‡∏≥‡∏£‡∏∏‡∏á‡∏ú‡∏¥‡∏ß (Skincare - Rule-Based Logic)
# ----------------------------------------------------------------------

def recommend_skincare(skin_analysis_results, db):
    """‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Å‡∏é‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏ö‡∏≥‡∏£‡∏∏‡∏á‡∏ú‡∏¥‡∏ß‡∏ï‡∏≤‡∏°‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏¥‡∏ß"""
    skin_type = skin_analysis_results['Skin_Type']
    acne_severity = skin_analysis_results['Acne_Severity']
    recommendations = {}

    # 1. Cleanser (‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î)
    if skin_type in ['Oily', 'Combination'] and acne_severity != 'Low':
        reco = db[(db['Category'] == 'Cleanser') & (db['Key_Ingredient'].str.contains('Salicylic Acid|BHA', case=False))].head(1)
    elif skin_type == 'Dry':
        reco = db[(db['Category'] == 'Cleanser') & (db['Key_Ingredient'].str.contains('Ceramide|Glycerin', case=False))].head(1)
    else:
        reco = db[db['Category'] == 'Cleanser'].head(1)
    if not reco.empty:
        recommendations['Step 1: Cleanser (‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î)'] = reco

    # 2. Treatment (‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏™‡∏¥‡∏ß/‡∏•‡∏î‡∏£‡∏≠‡∏¢)
    if acne_severity == 'Moderate':
        reco = db[(db['Key_Ingredient'].str.contains('Niacinamide|Salicylic Acid|Benzoyl Peroxide', case=False)) & (db['Category'] == 'Treatment')].head(2)
        if not reco.empty:
            recommendations['Step 2: Targeted Treatment (‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏™‡∏¥‡∏ß/‡∏•‡∏î‡∏£‡∏≠‡∏¢)'] = reco
    
    # 3. Moisturizer
    if skin_type in ['Oily', 'Combination']:
        reco = db[(db['Category'] == 'Moisturizer') & (db['Product_Name'].str.contains('Gel|Water|Lightweight', case=False))].head(1)
    else:
        reco = db[(db['Category'] == 'Moisturizer') & (db['Key_Ingredient'].str.contains('Ceramide|Squalane', case=False))].head(1)
    if not reco.empty:
        recommendations['Step 3: Moisturizer (‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∏‡πà‡∏°‡∏ä‡∏∑‡πâ‡∏ô)'] = reco

    # 4. Sunscreen
    reco = db[db['Category'] == 'Sunscreen'].head(1)
    if not reco.empty:
        recommendations['Step 4: Sunscreen (‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô)'] = reco
        
    return recommendations


# ----------------------------------------------------------------------
# 2.2 ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏â‡∏î‡∏™‡∏µ‡∏£‡∏≠‡∏á‡∏û‡∏∑‡πâ‡∏ô (Foundation)
# ----------------------------------------------------------------------

def recommend_foundation(undertone, depth_scale, db):
    """‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÄ‡∏â‡∏î‡∏™‡∏µ‡∏£‡∏≠‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ï‡∏≤‡∏°‡πÇ‡∏ó‡∏ô‡∏ú‡∏¥‡∏ß‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏°"""
    if db.empty:
        return pd.DataFrame()

    filtered_df = db[db['Undertone'] == undertone]
    
    if filtered_df.empty:
        # ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ Neutral
        filtered_df = db[db['Undertone'] == 'Neutral']

    if filtered_df.empty:
        return pd.DataFrame() 

    # ‡∏´‡∏≤‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏î‡∏™‡∏µ‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏Å‡∏±‡∏ö Depth_Scale ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
    filtered_df['Depth_Diff'] = np.abs(filtered_df['Depth_Scale'] - depth_scale)
    
    # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏î‡∏™‡∏µ‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î 3 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å
    return filtered_df.sort_values(by='Depth_Diff').head(3).drop(columns=['Depth_Diff']).reset_index(drop=True)


# ----------------------------------------------------------------------
# 3. Streamlit UI ‡∏´‡∏•‡∏±‡∏Å
# ----------------------------------------------------------------------

def main():
    if PRODUCT_DB.empty or SHADE_DB.empty or TONE_DB.empty:
        st.warning("‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (products.csv, foundation_shades.csv, skin_tones.csv) ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
        return

    st.title("üî¨ AI Skincare & Makeup Advisor: Face Analysis Project")
    st.caption("‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏ó‡∏ô‡∏™‡∏µ‡∏ú‡∏¥‡∏ß ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ú‡∏¥‡∏ß ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå")
    st.markdown("---")
    
    st.subheader("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì")
    st.info("üí° **‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö:** ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ **'oil'**, **'acne'**, **'dry'** ‡∏´‡∏£‡∏∑‡∏≠ **'‡πÅ‡∏´‡πâ‡∏á'** ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô!")
    
    uploaded_file = st.file_uploader("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û (JPG/PNG)", type=["jpg", "jpeg", "png"])

    if uploaded_file is not None:
        
        # 1. ‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
        col1, col2 = st.columns([1, 1])

        with col1:
            try:
                # ‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏ß‡∏¢ OpenCV ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£
                file_bytes = np.asarray(bytearray(uploaded_file.read()), dtype=np.uint8)
                opencv_image = cv2.imdecode(file_bytes, 1)
                st.image(opencv_image, channels="BGR", caption=f"‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î ({uploaded_file.name})", use_column_width=True)
            except Exception as e:
                st.error(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ: {e}")

        with col2:
            st.subheader("üìä ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏†‡∏≤‡∏û‡∏ú‡∏¥‡∏ß‡πÅ‡∏•‡∏∞‡πÇ‡∏ó‡∏ô‡∏™‡∏µ (Simulated)")
            with st.spinner('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•...'):
                results = analyze_skin(uploaded_file, TONE_DB)
                
            if results:
                st.success("‚úÖ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! (‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≥‡∏•‡∏≠‡∏á)")
                st.metric(label="‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ú‡∏¥‡∏ß‡∏´‡∏•‡∏±‡∏Å", value=f"**{results['Skin_Type']}**")
                st.metric(label="‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ß", value=f"**{results['Acne_Severity']}**")
                st.info(f"**‡πÇ‡∏ó‡∏ô‡∏™‡∏µ‡∏ú‡∏¥‡∏ß (Undertone):** {results['Undertone']} | **‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏° (Depth):** {results['Depth_Scale']:.1f}")

        st.markdown("---")
        
        # 2. ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ Skincare
        st.header("üß¥ ‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏ö‡∏≥‡∏£‡∏∏‡∏á‡∏ú‡∏¥‡∏ß‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ (Skincare)")
        skincare_recommendations = recommend_skincare(results, PRODUCT_DB)

        if not skincare_recommendations:
            st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏ö‡∏≥‡∏£‡∏∏‡∏á‡∏ú‡∏¥‡∏ß‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 'products.csv'.")
        else:
            for category, df_reco in skincare_recommendations.items():
                st.markdown(f"#### {category}")
                for _, row in df_reco.iterrows():
                    st.markdown(f"**{row['Product_Name']}** (‡πÅ‡∏ö‡∏£‡∏ô‡∏î‡πå: {row['Brand']})")
                    st.markdown(f"**‡∏à‡∏∏‡∏î‡πÄ‡∏î‡πà‡∏ô:** *{row['Key_Ingredient']}* | ‡∏£‡∏≤‡∏Ñ‡∏≤: {row['Price_Range']}")
                    st.markdown(f"[üîó ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤]({row['Konvy_Link']})")
                    st.markdown("---")
        
        st.markdown("---")

        # 3. ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ Foundation
        st.header("üé® ‡πÄ‡∏â‡∏î‡∏™‡∏µ‡∏£‡∏≠‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ (Foundation)")
        
        foundation_recommendations = recommend_foundation(
            results['Undertone'], results['Depth_Scale'], SHADE_DB
        )

        if not foundation_recommendations.empty:
            st.markdown(f"**‡πÄ‡∏â‡∏î‡∏™‡∏µ‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î** ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏ó‡∏ô **{results['Undertone']}** ‡πÅ‡∏•‡∏∞‡∏ú‡∏¥‡∏ß‡∏£‡∏∞‡∏î‡∏±‡∏ö **{results['Depth_Scale']:.1f}**:")
            st.dataframe(
                foundation_recommendations[['Shade_Name', 'Brand', 'Undertone', 'Depth_Scale', 'Coverage', 'Konvy_Link']],
                use_container_width=True
            )
        else:
            st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏â‡∏î‡∏™‡∏µ‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 'foundation_shades.csv'.")


if __name__ == "__main__":
    main()
