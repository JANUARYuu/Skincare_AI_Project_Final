import streamlit as st
import pandas as pd
import numpy as np
import cv2  # ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á: pip install opencv-python
from PIL import Image
import io

# ----------------------------------------------------------------------
# 1. ‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡πÇ‡∏°‡πÄ‡∏î‡∏•
# ----------------------------------------------------------------------

# ‡πÇ‡∏´‡∏•‡∏î‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô Root Directory)
try:
    PRODUCT_DB = pd.read_csv("products.csv")
except FileNotFoundError:
    st.error("‚ùå ERROR: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå 'products.csv'")
    PRODUCT_DB = pd.DataFrame() 

try:
    SHADE_DB = pd.read_csv("foundation_shades.csv")
except FileNotFoundError:
    st.warning("‚ö†Ô∏è Warning: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå 'foundation_shades.csv'")
    SHADE_DB = pd.DataFrame() 

# ‡πÇ‡∏´‡∏•‡∏î Haar Cascade ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏î‡∏ß‡∏á‡∏ï‡∏≤ (‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏õ GitHub)
FACE_CASCADE = None
EYE_CASCADE = None
try:
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏°‡πÄ‡∏î‡∏• Haar Cascade ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô GitHub ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    FACE_CASCADE = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')
    EYE_CASCADE = cv2.CascadeClassifier('haarcascade_eye.xml')
    if FACE_CASCADE.empty() or EYE_CASCADE.empty():
        st.error("‚ùå ERROR: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• Haar Cascade (.xml) ‡πÑ‡∏î‡πâ ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô GitHub.")
except Exception as e:
    # ‡∏´‡∏≤‡∏Å Streamlit Cloud ‡∏£‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏Ç‡∏≤‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏¢‡∏±‡∏á‡∏£‡∏±‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ
    pass


# ----------------------------------------------------------------------
# 2. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡πÄ‡∏â‡∏î‡∏™‡∏µ‡∏ú‡∏¥‡∏ß (Simulated Analysis)
# ----------------------------------------------------------------------

def detect_and_analyze_face(image):
    """
    ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤, ‡∏î‡∏ß‡∏á‡∏ï‡∏≤, ‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏â‡∏î‡∏™‡∏µ‡∏ú‡∏¥‡∏ß/‡∏™‡∏†‡∏≤‡∏û‡∏ú‡∏¥‡∏ß
    ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤: (‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏£‡∏≠‡∏ö, Undertone, Depth, Skin_Concern)
    """
    # ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (Default values)
    detected_img = image
    undertone = None
    depth = None
    skin_concern = "All"
    
    if FACE_CASCADE is None or EYE_CASCADE is None:
        # ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏°‡πÄ‡∏î‡∏• cascade, ‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
        undertone = np.random.choice(["Warm", "Cool", "Neutral"])
        depth = np.random.uniform(2.5, 7.5)
        skin_concern = np.random.choice(['Oily', 'Dry', 'Sensitive', 'Acne-Prone', 'Hyperpigmentation'])
        return detected_img, undertone, depth, skin_concern
        
    # ‡πÅ‡∏õ‡∏•‡∏á‡∏†‡∏≤‡∏û PIL ‡πÄ‡∏õ‡πá‡∏ô NumPy Array ‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô Grayscale ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö OpenCV
    img_array = np.array(image.convert('RGB'))
    gray = cv2.cvtColor(img_array, cv2.COLOR_BGR2GRAY)

    faces = FACE_CASCADE.detectMultiScale(gray, 1.1, 4)
    
    if len(faces) == 0:
        return image, None, None, None # ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤
    
    # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏û‡∏ö
    x, y, w, h = faces[0]
    
    # ‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≠‡∏ö‡∏™‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°‡∏£‡∏≠‡∏ö‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤
    cv2.rectangle(img_array, (x, y), (x + w, y + h), (255, 0, 0), 2)
    
    # **[!!! ‡∏™‡πà‡∏ß‡∏ô‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏â‡∏î‡∏™‡∏µ‡∏ú‡∏¥‡∏ß‡∏à‡∏£‡∏¥‡∏á !!!]**
    # ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á ‡πÇ‡∏Ñ‡πâ‡∏î‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡πà‡∏≤‡∏™‡∏µ‡∏à‡∏≤‡∏Å‡∏ö‡∏£‡∏¥‡πÄ‡∏ß‡∏ì‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î (‡πÄ‡∏ä‡πà‡∏ô ‡∏Ñ‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏Å‡πâ‡∏°)
    
    # ***‡πÇ‡∏Ñ‡πâ‡∏î‡∏à‡∏≥‡∏•‡∏≠‡∏á:***
    # 1. Depth & Undertone (‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏Ñ‡πà‡∏≤‡∏™‡∏∏‡πà‡∏°)
    if w > 300: # ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ê‡∏≤‡∏ô: ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏°‡∏Ç‡∏≠‡∏á‡∏ú‡∏¥‡∏ß
        undertone = np.random.choice(["Warm", "Neutral"])
        depth = np.random.uniform(5.5, 8.0)
    else:
        undertone = np.random.choice(["Neutral", "Cool"])
        depth = np.random.uniform(2.0, 5.0)
        
    # 2. Skin Concern (‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤)
    # ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ê‡∏≤‡∏ô: ‡∏´‡∏≤‡∏Å‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏°‡∏≤‡∏Å (x ‡∏ô‡πâ‡∏≠‡∏¢) = ‡∏°‡∏µ‡∏™‡∏¥‡∏ß (Acne-Prone)
    if x < 50:
        skin_concern = 'Acne-Prone'
    # ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ê‡∏≤‡∏ô: ‡∏´‡∏≤‡∏Å‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏•‡πá‡∏Å (w, h ‡∏ô‡πâ‡∏≠‡∏¢) = Sensitive
    elif w < 200:
        skin_concern = 'Sensitive'
    else:
        skin_concern = 'Oily' # ‡∏Ñ‡πà‡∏≤‡∏™‡∏∏‡πà‡∏°‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
        
    # ‡πÅ‡∏õ‡∏•‡∏á‡∏†‡∏≤‡∏û‡∏Å‡∏•‡∏±‡∏ö
    detected_img = Image.fromarray(cv2.cvtColor(img_array, cv2.COLOR_BGR2RGB))

    return detected_img, undertone, depth, skin_concern


# ----------------------------------------------------------------------
# 3. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏ö‡∏≥‡∏£‡∏∏‡∏á‡∏ú‡∏¥‡∏ß (Skincare - ‡πÉ‡∏ä‡πâ‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°)
# ----------------------------------------------------------------------

def recommend_skincare(skin_type, max_price, category):
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏ö‡∏≥‡∏£‡∏∏‡∏á‡∏ú‡∏¥‡∏ß‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ú‡∏¥‡∏ß, ‡∏£‡∏≤‡∏Ñ‡∏≤ ‡πÅ‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà"""
    if PRODUCT_DB.empty:
        return pd.DataFrame()
    
    df = PRODUCT_DB.copy()
    price_map = {'Low': 1, 'Medium': 2, 'High': 3}
    df['Price_Value'] = df['Price_Range'].map(price_map)
    
    if skin_type != 'All':
        df = df[df['Target_Skin_Type'].isin([skin_type, 'All'])]

    if category != 'All':
        df = df[df['Category'] == category]
        
    if max_price == 'Low':
        df = df[df['Price_Value'] <= 1]
    elif max_price == 'Medium':
        df = df[df['Price_Value'] <= 2]

    return df.head(10).drop(columns=['Price_Value']).reset_index(drop=True)


# ----------------------------------------------------------------------
# 4. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏â‡∏î‡∏™‡∏µ‡∏£‡∏≠‡∏á‡∏û‡∏∑‡πâ‡∏ô (Foundation - ‡πÉ‡∏ä‡πâ‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°)
# ----------------------------------------------------------------------

def recommend_foundation(undertone, depth_scale, skin_type):
    """‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÄ‡∏â‡∏î‡∏™‡∏µ‡∏£‡∏≠‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏µ‡∏ú‡∏¥‡∏ß/‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£"""
    if SHADE_DB.empty:
        return pd.DataFrame()

    filtered_df = SHADE_DB[SHADE_DB['Undertone'] == undertone]
    if filtered_df.empty:
        filtered_df = SHADE_DB[SHADE_DB['Undertone'] == 'Neutral']
        if filtered_df.empty:
            return pd.DataFrame() 

    filtered_df['Depth_Diff'] = np.abs(filtered_df['Depth_Scale'] - depth_scale)
    filtered_df = filtered_df.sort_values(by='Depth_Diff').head(10)

    if skin_type != 'All':
        filtered_df = filtered_df[filtered_df['Best_For_Type'].isin([skin_type, 'All'])]

    return filtered_df.head(3).drop(columns=['Depth_Diff']).reset_index(drop=True)

# ----------------------------------------------------------------------
# 5. ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á Streamlit ‡∏´‡∏•‡∏±‡∏Å (main)
# ----------------------------------------------------------------------

def main():
    st.set_page_config(
        page_title="AI Skin & Makeup Analyzer",
        layout="wide"
    )
    st.title("‚ú® AI Skin & Makeup Analyzer: ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏¥‡∏ß‡∏ú‡πà‡∏≤‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û")
    st.markdown("‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏ó‡∏ô‡∏™‡∏µ‡∏ú‡∏¥‡∏ß ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ú‡∏¥‡∏ß ‡πÅ‡∏•‡∏∞‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°")
    st.markdown("---")

    # ==================================================================
    # UI: ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î/‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û
    # ==================================================================
    
    st.subheader("üì∏ 1. ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î/‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì")
    col_upload, col_camera = st.columns(2)
    
    with col_upload:
        uploaded_file = st.file_uploader("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û", type=["png", "jpg", "jpeg"])
