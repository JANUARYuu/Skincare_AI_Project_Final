import streamlit as st
import pandas as pd
import numpy as np
import cv2  # ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ OpenCV
from PIL import Image
import io

# ----------------------------------------------------------------------
# 1. ‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡πÇ‡∏°‡πÄ‡∏î‡∏•
# ----------------------------------------------------------------------

# ‡πÇ‡∏´‡∏•‡∏î‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô Root Directory)
try:
    PRODUCT_DB = pd.read_csv("products.csv")
except FileNotFoundError:
    st.error("‚ùå ERROR: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå 'products.csv'")
    PRODUCT_DB = pd.DataFrame() 

try:
    SHADE_DB = pd.read_csv("foundation_shades.csv")
except FileNotFoundError:
    st.warning("‚ö†Ô∏è Warning: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå 'foundation_shades.csv'")
    SHADE_DB = pd.DataFrame() 

# ‡πÇ‡∏´‡∏•‡∏î Haar Cascade ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏î‡∏ß‡∏á‡∏ï‡∏≤ (‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏õ GitHub)
try:
    FACE_CASCADE = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')
    EYE_CASCADE = cv2.CascadeClassifier('haarcascade_eye.xml')
    if FACE_CASCADE.empty() or EYE_CASCADE.empty():
        st.error("‚ùå ERROR: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• Haar Cascade (.xml) ‡πÑ‡∏î‡πâ ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô GitHub.")
except Exception as e:
    st.error(f"‚ùå ERROR: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î OpenCV/Haar Cascade ‡πÑ‡∏î‡πâ ({e})")
    FACE_CASCADE = None
    EYE_CASCADE = None


# ----------------------------------------------------------------------
# 2. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡πÄ‡∏â‡∏î‡∏™‡∏µ‡∏ú‡∏¥‡∏ß
# ----------------------------------------------------------------------

def detect_and_analyze_face(image):
    """
    ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤, ‡∏î‡∏ß‡∏á‡∏ï‡∏≤, ‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏â‡∏î‡∏™‡∏µ‡∏ú‡∏¥‡∏ß
    ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤: (‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏£‡∏≠‡∏ö, Undertone, Depth)
    """
    if FACE_CASCADE is None or EYE_CASCADE is None:
        return image, None, None

    # ‡πÅ‡∏õ‡∏•‡∏á‡∏†‡∏≤‡∏û PIL ‡πÄ‡∏õ‡πá‡∏ô NumPy Array ‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô Grayscale ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö OpenCV
    img_array = np.array(image.convert('RGB'))
    gray = cv2.cvtColor(img_array, cv2.COLOR_BGR2GRAY)

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤
    faces = FACE_CASCADE.detectMultiScale(gray, 1.1, 4)
    
    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏™‡∏µ‡∏ú‡∏¥‡∏ß‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
    undertone = "Neutral"
    depth = 4.5
    
    if len(faces) == 0:
        return image, None, None # ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤
    
    # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏û‡∏ö
    for (x, y, w, h) in faces:
        # ‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≠‡∏ö‡∏™‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°‡∏£‡∏≠‡∏ö‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤
        cv2.rectangle(img_array, (x, y), (x + w, y + h), (255, 0, 0), 2)
        
        # Crop ‡∏ö‡∏£‡∏¥‡πÄ‡∏ß‡∏ì‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏â‡∏î‡∏™‡∏µ (‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏à‡∏≤‡∏Å‡πÅ‡∏Å‡πâ‡∏°/‡∏Ñ‡∏≠)
        face_roi = img_array[y:y + h, x:x + w]
        
        # **[!!! ‡∏™‡πà‡∏ß‡∏ô‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏â‡∏î‡∏™‡∏µ‡∏ú‡∏¥‡∏ß‡∏à‡∏£‡∏¥‡∏á !!!]**
        # ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á, ‡πÇ‡∏Ñ‡πâ‡∏î‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏™‡∏µ RGB/LAB ‡πÉ‡∏ô‡∏ö‡∏£‡∏¥‡πÄ‡∏ß‡∏ì‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
        # ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤ Undertone (Warm/Cool/Neutral) ‡πÅ‡∏•‡∏∞ Depth (‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ß‡πà‡∏≤‡∏á)
        
        # ***‡πÇ‡∏Ñ‡πâ‡∏î‡∏à‡∏≥‡∏•‡∏≠‡∏á:***
        # ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤: ‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏°‡∏≤‡∏Å = ‡∏ú‡∏¥‡∏ß‡πÄ‡∏Ç‡πâ‡∏° (Depth ‡∏™‡∏π‡∏á)
        if w > 300:
            undertone = "Warm"
            depth = np.random.uniform(6.0, 8.0)
        else:
            undertone = "Neutral"
            depth = np.random.uniform(3.0, 5.0)
            
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏î‡∏ß‡∏á‡∏ï‡∏≤‡πÉ‡∏ô ROI ‡∏Ç‡∏≠‡∏á‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤
        roi_gray = gray[y:y + h, x:x + w]
        eyes = EYE_CASCADE.detectMultiScale(roi_gray)
        for (ex, ey, ew, eh) in eyes:
            cv2.rectangle(img_array, (x + ex, y + ey), (x + ex + ew, y + ey + eh), (0, 255, 0), 2)
            
        # ‡πÉ‡∏ä‡πâ‡πÅ‡∏Ñ‡πà‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å
        break

    return Image.fromarray(cv2.cvtColor(img_array, cv2.COLOR_BGR2RGB)), undertone, depth


# ----------------------------------------------------------------------
# 3. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏â‡∏î‡∏™‡∏µ‡∏£‡∏≠‡∏á‡∏û‡∏∑‡πâ‡∏ô (‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°)
# ----------------------------------------------------------------------

def recommend_foundation(undertone, depth_scale, skin_type):
    """‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÄ‡∏â‡∏î‡∏™‡∏µ‡∏£‡∏≠‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏µ‡∏ú‡∏¥‡∏ß/‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£"""
    if SHADE_DB.empty:
        return None

    filtered_df = SHADE_DB[SHADE_DB['Undertone'] == undertone]
    if filtered_df.empty:
        filtered_df = SHADE_DB[SHADE_DB['Undertone'] == 'Neutral']
        if filtered_df.empty:
            return None 

    # ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà Depth_Scale
    filtered_df['Depth_Diff'] = np.abs(filtered_df['Depth_Scale'] - depth_scale)
    filtered_df = filtered_df.sort_values(by='Depth_Diff').head(10)

    # ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏° Skin Type
    if skin_type != 'All':
        filtered_df = filtered_df[filtered_df['Best_For_Type'].isin([skin_type, 'All'])]

    return filtered_df.head(3).drop(columns=['Depth_Diff']).reset_index(drop=True)

# ----------------------------------------------------------------------
# 4. ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á Streamlit ‡∏´‡∏•‡∏±‡∏Å (main)
# ----------------------------------------------------------------------

def main():
    st.set_page_config(
        page_title="AI Skincare & Makeup Advisor",
        layout="wide"
    )
    st.title("‚ú® AI Skincare & Makeup Advisor (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏ß‡∏Ñ‡∏ô‡πÑ‡∏ó‡∏¢)")
    st.markdown("---")

    # ==================================================================
    # 4.1 ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏ö‡∏≥‡∏£‡∏∏‡∏á‡∏ú‡∏¥‡∏ß (Skincare)
    # ==================================================================
    st.header("üß¥ 1. ‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏ö‡∏≥‡∏£‡∏∏‡∏á‡∏ú‡∏¥‡∏ß")
    # ... (‡∏ô‡∏≥‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô Skincare ‡πÄ‡∏î‡∏¥‡∏°‡∏°‡∏≤‡∏ß‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà) ...
    # UI Input ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Skincare
    if PRODUCT_DB.empty:
        st.error("‡πÇ‡∏õ‡∏£‡∏î‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå 'products.csv' ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏•‡∏á‡πÉ‡∏ô GitHub")
    else:
        st.markdown("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ú‡∏¥‡∏ß‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì:")
        
        with st.container():
            col_skin, col_price, col_cat = st.columns(3)

            skin_type = col_skin.selectbox(
                "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ú‡∏¥‡∏ß‡∏´‡∏•‡∏±‡∏Å/‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ú‡∏¥‡∏ß:",
                options=['All', 'Oily', 'Dry', 'Sensitive', 'Acne-Prone', 'Hyperpigmentation'],
                index=0
            )

            max_price = col_price.selectbox(
                "‡∏ä‡πà‡∏ß‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£:",
                options=['Low', 'Medium', 'High']
            )
            
            category = col_cat.selectbox(
                "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£:",
                options=['All', 'Cleanser', 'Toner', 'Essence', 'Serum', 'Moisturizer', 'Sunscreen', 'Treatment', 'Mask', 'Mist'],
            )

            if st.button("üîé ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°", use_container_width=True):
                recommendations = recommend_skincare(skin_type, max_price, category)
                
                if not recommendations.empty:
                    st.subheader(f"‚úÖ ‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏ß '{skin_type}' (‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà: {category}, ‡∏£‡∏≤‡∏Ñ‡∏≤: {max_price} ‡πÅ‡∏•‡∏∞‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤)")
                    st.dataframe(recommendations)
                else:
                    st.warning("‚ö†Ô∏è ‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á")


    st.markdown("---")


    # ==================================================================
    # 4.2 ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏â‡∏î‡∏™‡∏µ‡∏£‡∏≠‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û (Foundation & Face Analysis)
    # ==================================================================
    st.header("üé® 2. ‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏â‡∏î‡∏™‡∏µ‡∏£‡∏≠‡∏á‡∏û‡∏∑‡πâ‡∏ô")
    
    if SHADE_DB.empty or FACE_CASCADE is None:
        st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏±‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ: ‡∏Ç‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå 'foundation_shades.csv' ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏ü‡∏•‡πå Haar Cascade (.xml)")
    else:
        st.markdown("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏ó‡∏ô‡∏™‡∏µ‡∏ú‡∏¥‡∏ß‡πÅ‡∏•‡∏∞‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏£‡∏≠‡∏á‡∏û‡∏∑‡πâ‡∏ô:")
        
        uploaded_file = st.file_uploader("Upload Image", type=["png", "jpg", "jpeg"])

        if uploaded_file is not None:
            # ‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏û PIL
            image = Image.open(uploaded_file)
            
            # ‡∏£‡∏±‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
            processed_img, undertone, depth = detect_and_analyze_face(image)

            col_img, col_result = st.columns(2)
            
            with col_img:
                st.image(processed_img, caption="‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏î‡∏ß‡∏á‡∏ï‡∏≤", use_column_width=True)

            with col_result:
                if undertone is None:
                    st.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏ô‡∏†‡∏≤‡∏û ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô")
                else:
                    st.subheader("üìä ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô (‡∏à‡∏≥‡∏•‡∏≠‡∏á)")
                    st.info(f"**‡πÇ‡∏ó‡∏ô‡∏™‡∏µ‡∏ú‡∏¥‡∏ß (Undertone):** {undertone}")
                    st.info(f"**‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏° (Depth):** {depth:.1f}")

                    # --- ‡∏ô‡∏≥‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏£‡∏≠‡∏á‡∏û‡∏∑‡πâ‡∏ô ---
                    st.subheader("‚ú® ‡πÄ‡∏â‡∏î‡∏™‡∏µ‡∏£‡∏≠‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥")
                    
                    # ‡∏ñ‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ú‡∏¥‡∏ß (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏£‡∏≠‡∏á‡∏û‡∏∑‡πâ‡∏ô)
                    user_skin_type_f = st.selectbox(
                        "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ú‡∏¥‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏û‡∏∑‡πâ‡∏ô:",
                        options=['All', 'Oily', 'Dry', 'Sensitive'],
                        index=0
                    )
                    
                    foundation_recommendations = recommend_foundation(
                        undertone, depth, user_skin_type_f
                    )

                    if foundation_recommendations is not None and not foundation_recommendations.empty:
                        st.dataframe(
                            foundation_recommendations[['Shade_Name', 'Brand', 'Coverage', 'Best_For_Type', 'Konvy_Link']],
                            use_container_width=True
                        )
                    else:
                        st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏â‡∏î‡∏™‡∏µ‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")


if __name__ == '__main__':
    main()
