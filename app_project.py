import streamlit as st
import pandas as pd
import numpy as np
import cv2
import os

# ----------------------------------------------------------------------
# 0. ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
# ----------------------------------------------------------------------

st.set_page_config(layout="wide", page_title="AI Skincare Advisor Project")

@st.cache_data
def load_product_db():
    """‡πÇ‡∏´‡∏•‡∏î‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏à‡∏≤‡∏Å products.csv ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢"""
    file_path = 'products.csv'
    if not os.path.exists(file_path):
        st.error(f"‚ùó ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡πâ‡∏≤‡∏¢‡πÅ‡∏£‡∏á: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå '{file_path}' ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
        return pd.DataFrame()
    
    try:
        db = pd.read_csv(file_path)
        # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Rule-Based Logic
        db['Price_Range'] = db['Price_Range'].fillna('‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')
        db['Konvy_Link'] = db['Konvy_Link'].fillna('#')
        # ‡πÅ‡∏õ‡∏•‡∏á Key_Ingredient ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏ï‡∏£‡∏¥‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ str.contains ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
        db['Key_Ingredient'] = db['Key_Ingredient'].astype(str) 
        return db
    except Exception as e:
        st.error(f"‚ùó ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå CSV: {e}")
        return pd.DataFrame()

PRODUCT_DB = load_product_db()

# ----------------------------------------------------------------------
# 1. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏†‡∏≤‡∏û‡∏ú‡∏¥‡∏ß (Simulation)
# ----------------------------------------------------------------------

def analyze_skin(uploaded_file):
    """
    ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏¥‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
    """
    if uploaded_file is None:
        return None
        
    file_name = uploaded_file.name.lower()
    
    # ‡∏Å‡∏é‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á 1: ‡∏ú‡∏¥‡∏ß‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ (Oily/Acne-Prone)
    if any(keyword in file_name for keyword in ["acne", "oil", "‡∏°‡∏±‡∏ô", "‡∏™‡∏¥‡∏ß"]):
        return {
            'Skin_Type': 'Oily',  
            'Acne_Severity': 'Moderate',
            'Oiliness_Score': 0.85
        }
    # ‡∏Å‡∏é‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á 2: ‡∏ú‡∏¥‡∏ß‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ (Combination/Normal)
    elif any(keyword in file_name for keyword in ["normal", "dry", "combination", "‡∏õ‡∏Å‡∏ï‡∏¥", "‡πÅ‡∏´‡πâ‡∏á"]):
        return {
            'Skin_Type': 'Dry', 
            'Acne_Severity': 'Low',
            'Oiliness_Score': 0.30
        }
    # ‡∏Å‡∏é‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á 3: ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    else:
        return {
            'Skin_Type': 'Combination', 
            'Acne_Severity': 'Low',
            'Oiliness_Score': 0.45
        }


# ----------------------------------------------------------------------
# 2. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå (Rule-Based Logic)
# ----------------------------------------------------------------------

def recommend_products(skin_analysis_results, db):
    """‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Å‡∏é‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏ï‡∏≤‡∏°‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏¥‡∏ß"""
    skin_type = skin_analysis_results['Skin_Type']
    acne_severity = skin_analysis_results['Acne_Severity']
    recommendations = {}

    # 1. Cleanser (‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î)
    if skin_type in ['Oily', 'Combination'] and acne_severity != 'Low':
        reco = db[(db['Category'] == 'Cleanser') & (db['Key_Ingredient'].str.contains('Salicylic Acid|BHA', case=False))].head(1)
    elif skin_type == 'Dry':
        reco = db[(db['Category'] == 'Cleanser') & (db['Key_Ingredient'].str.contains('Ceramide|Glycerin', case=False))].head(1)
    else:
        reco = db[db['Category'] == 'Cleanser'].head(1) # ‡∏Ñ‡∏•‡∏µ‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
        
    if not reco.empty:
        recommendations['Step 1: Cleanser (‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î)'] = reco

    # 2. Treatment (‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏™‡∏¥‡∏ß/‡∏•‡∏î‡∏£‡∏≠‡∏¢)
    if acne_severity == 'Moderate':
        reco = db[(db['Key_Ingredient'].str.contains('Niacinamide|Salicylic Acid|Benzoyl Peroxide', case=False)) & (db['Category'] == 'Treatment')].head(2)
        if not reco.empty:
            recommendations['Step 2: Targeted Treatment (‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏™‡∏¥‡∏ß/‡∏•‡∏î‡∏£‡∏≠‡∏¢)'] = reco
    
    # 3. Serum/Toner (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∏‡πà‡∏°‡∏ä‡∏∑‡πâ‡∏ô/‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡∏ô)
    if skin_type in ['Oily', 'Combination']:
        reco = db[(db['Category'].isin(['Serum', 'Toner'])) & (db['Key_Ingredient'].str.contains('Niacinamide|Green Tea', case=False))].head(1)
    elif skin_type == 'Dry':
        reco = db[(db['Category'] == 'Serum') & (db['Key_Ingredient'].str.contains('Hyaluronic Acid|Ceramide', case=False))].head(1)
    
    if not reco.empty:
        recommendations['Step 3: Serum/Essence (‡∏ö‡∏≥‡∏£‡∏∏‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏à‡∏∏‡∏î)'] = reco
        

    # 4. Moisturizer (‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∏‡πà‡∏°‡∏ä‡∏∑‡πâ‡∏ô)
    if skin_type in ['Oily', 'Combination']:
        reco = db[(db['Category'] == 'Moisturizer') & (db['Product_Name'].str.contains('Gel|Water|Lightweight', case=False))].head(1)
    else:
        reco = db[(db['Category'] == 'Moisturizer') & (db['Key_Ingredient'].str.contains('Ceramide|Squalane', case=False))].head(1)
    
    if not reco.empty:
        recommendations['Step 4: Moisturizer (‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∏‡πà‡∏°‡∏ä‡∏∑‡πâ‡∏ô)'] = reco

    # 5. Sunscreen (‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô)
    reco = db[db['Category'] == 'Sunscreen'].head(1)
    if not reco.empty:
        recommendations['Step 5: Sunscreen (‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô)'] = reco
        
    return recommendations

# ----------------------------------------------------------------------
# 3. Streamlit UI ‡∏´‡∏•‡∏±‡∏Å
# ----------------------------------------------------------------------

def main():
    if PRODUCT_DB.empty:
        st.warning("‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå 'products.csv' ‡∏Å‡πà‡∏≠‡∏ô‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠")
        return

    st.title("üî¨ AI Skincare Advisor: Face Analysis Project")
    st.caption("‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏†‡∏≤‡∏û‡∏ú‡∏¥‡∏ß‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏ô‡∏≥‡πÄ‡∏™‡∏ô‡∏≠)")
    st.markdown("---")
    
    st.subheader("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì")
    st.info("üí° **‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö:** ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ **'oil'**, **'acne'** ‡∏´‡∏£‡∏∑‡∏≠ **'‡πÅ‡∏´‡πâ‡∏á'** ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô!")
    
    uploaded_file = st.file_uploader("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û (JPG/PNG)", type=["jpg", "jpeg", "png"])

    if uploaded_file is not None:
        
        # 1. ‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
        col1, col2 = st.columns([1, 1])

        with col1:
            try:
                # ‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏î‡πâ‡∏ß‡∏¢ numpy ‡πÅ‡∏•‡∏∞ cv2 ‡∏ô‡∏±‡πâ‡∏ô‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Streamlit
                file_bytes = np.asarray(bytearray(uploaded_file.read()), dtype=np.uint8)
                opencv_image = cv2.imdecode(file_bytes, 1)
                st.image(opencv_image, channels="BGR", caption=f"‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î ({uploaded_file.name})", use_column_width=True)
            except Exception as e:
                st.error(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ: {e}")

        with col2:
            st.subheader("üìä ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏†‡∏≤‡∏û‡∏ú‡∏¥‡∏ß (Simulated)")
            with st.spinner('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•...'):
                results = analyze_skin(uploaded_file)
                
            if results:
                st.success("‚úÖ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! (‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≥‡∏•‡∏≠‡∏á)")
                st.metric(label="‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ú‡∏¥‡∏ß‡∏´‡∏•‡∏±‡∏Å", value=f"**{results['Skin_Type']}**")
                st.metric(label="‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ß", value=f"**{results['Acne_Severity']}**")
                st.caption(f"‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡∏ô: {results['Oiliness_Score']:.2f}")

        st.markdown("---")
        
        # 2. ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
        st.header("üõí ‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏ß‡∏Ñ‡∏∏‡∏ì")
        product_recommendations = recommend_products(results, PRODUCT_DB)

        if not product_recommendations:
            st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 'products.csv'.")
            return

        # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
        for category, df_reco in product_recommendations.items():
            st.markdown(f"#### {category}")
            
            for _, row in df_reco.iterrows():
                st.markdown(f"**{row['Product_Name']}** (‡πÅ‡∏ö‡∏£‡∏ô‡∏î‡πå: {row['Brand']})")
                st.markdown(f"**‡∏à‡∏∏‡∏î‡πÄ‡∏î‡πà‡∏ô:** *{row['Key_Ingredient']}* | ‡∏£‡∏≤‡∏Ñ‡∏≤: {row['Price_Range']}")
                st.markdown(f"‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ú‡∏¥‡∏ß: {row['Target_Skin_Type']} | ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà: {row['Category']}")
                st.markdown(f"[üîó ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤]({row['Konvy_Link']})")
                st.markdown("---")

if __name__ == "__main__":
    main()
